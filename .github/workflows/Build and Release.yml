name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        default: "https://www.dropbox.com/scl/fi/o4239h8z2f8uu1ha6j5z1/com.spotify.client_9.0.58_und3fined.ipa?rlkey=vri20b4cbpqyc36b3nt89ds2j&st=2s9erz9b&dl=1"
        required: true
      CHANGEVERSION:
        description: 'SpotC++ Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotfiy build action'
        required: true
        default: true
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override repo for EeveeSpotify'
        required: false
      upload_to_appdb:
        description: "Upload and Edit Metadata on appdb"
        default: true
        required: false
        type: boolean
      cleanup_old_versions:
        description: "Delete older versions of this app from appdb"
        default: true
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up variables
      id: setup
      run: |
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
        
    - name: Set EeveeSpotify Repo if given
      if: ${{ github.event.inputs.EEVEEREPO != '' }}
      run: |
        EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|' | sed 's|^https://github.com/||')
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV
        
    - name: Set EeveeSpotify Repo if not given
      if: ${{ github.event.inputs.EEVEEREPO == '' }}
      run: |
        EEVEEREPO=$(echo "whoeevee/EeveeSpotify")
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Dependencies
      run: |
        brew install make dpkg ldid jq
        pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

    - name: Set EEVEETAG if EEVEEVERSION not provided
      if: ${{ github.event.inputs.EEVEEVERSION == '' }}
      run: |
        echo "EEVEEVERSION not provided, fetching latest release tag..."
        EEVEETAG=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
        echo "Latest release tag: $EEVEETAG"
        echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
        
    - name: Set EEVEETAG if tag provided
      if: ${{ env.EEVEEVERSION != '' }}
      id: fetch-tags
      run: |
        EEVEEVERSION="${{ env.EEVEEVERSION }}"
        tags=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
        
        for tag in $tags; do
          if [[ $tag == *"$EEVEEVERSION"* ]]; then
            echo "EEVEETAG=$tag" >> $GITHUB_ENV
            echo "EEVEETAG: ${{ env.EEVEETAG }}"
            exit 0
          fi
        done
        echo "No matching tag found for EEVEEVERSION=$EEVEEVERSION"
        exit 1

    - name: Create Build Components folder
      run: mkdir -p "Build Components"

    - name: Download Spotify IPA
      run: |
        echo "Downloading From: ${{ github.event.inputs.SPOTURL }}"
        curl -L --output "Build Components/spotify.ipa" "${{ github.event.inputs.SPOTURL }}"
        echo "spotifypath=Build Components/spotify.ipa" >> $GITHUB_ENV

    - name: Download EeveeSpotify .deb file from releases
      if: ${{ github.event.inputs.USEACTIONSEEVEE == 'false' }}
      run: |
        eevee_asset=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | startswith("com.eevee.spotify") and endswith("iphoneos-arm.deb")).browser_download_url')
        echo "Downloading From: $eevee_asset"
        curl -Lo "Build Components/eevee.deb" "$eevee_asset"
        echo "eevee-arm=Build Components/eevee.deb" >> $GITHUB_ENV

    - name: Download EeveeSpotify .deb file from artifacts
      if: ${{ github.event.inputs.USEACTIONSEEVEE == 'true' }}
      run: |
        workflow_run_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.EEVEEREPO }}/actions/workflows/build-swift.yml/runs?status=success&per_page=1" | jq -r '.workflow_runs[0].id')
        echo "Workflow ID: $workflow_run_id"
        eevee_asset_url=$(curl -sL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/actions/runs/$workflow_run_id/artifacts | jq -r '.artifacts[] | select(.name | test("debug|arm64") | not) | .archive_download_url')
        echo "Downloading From: $eevee_asset_url"
        curl -LJ -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$eevee_asset_url" -o "eevee_artifact.zip"
        unzip -q "eevee_artifact.zip" -d extracted_files
        downloaded_file=$(find extracted_files -type f -name "*.deb" -print -quit)
        mv "$downloaded_file" "Build Components/eevee.deb"
        rm -rf extracted_files eevee_artifact.zip
        echo "eevee-arm=Build Components/eevee.deb" >> $GITHUB_ENV

    - name: Get Eevee Release Info
      id: eevee_info
      run: |
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }}")
        RELEASE_TITLE=$(echo "$RESPONSE" | jq -r '.name')
        RELEASE_BODY=$(echo "$RESPONSE" | jq -r '.body')
        FORMATTED_TITLE=$(echo "$RELEASE_TITLE" | sed 's/Swift/EeveeSpotify/')
        echo "EEVEEVERSIONNAME=$FORMATTED_TITLE" >> "$GITHUB_OUTPUT"
        echo "release_body<<EOF" >> "$GITHUB_OUTPUT"
        echo "$RELEASE_BODY" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
        
    - name: Read Spotify information from vanilla .ipa
      run: |
        cp "${{ env.spotifypath }}" "spotify_temp.zip"
        unzip -q "spotify_temp.zip" "Payload/Spotify.app/Info.plist"
        VANILLASPOTIFYVERSION=$(/usr/libexec/PlistBuddy -c "Print :SpotifyVersionShort" Payload/Spotify.app/Info.plist)
        echo "VANILLASPOTIFYVERSION=$VANILLASPOTIFYVERSION" >> $GITHUB_ENV
        echo "Vanilla Spotify Version: $VANILLASPOTIFYVERSION"
        rm -rf Payload spotify_temp.zip

    - name: Run Cyan and Prepare Info
      id: package_info
      run: |
        FINAL_IPA_NAME="Spotify_Enhanced_${{ env.VANILLASPOTIFYVERSION }}_${{ steps.eevee_info.outputs.EEVEEVERSIONNAME }}.ipa"
        Cyan -i "${{ env.spotifypath }}" -o "${FINAL_IPA_NAME}" -v ${{ env.VANILLASPOTIFYVERSION }} -f "${{ env.eevee-arm }}" -u -w
        echo "package_name=${FINAL_IPA_NAME}" >> "$GITHUB_OUTPUT"
        echo "job_id=$(echo -n "${{ github.run_id }}-${{ github.run_attempt }}" | shasum -a 1 | awk '{print $1}')" >> "$GITHUB_OUTPUT"

    - name: Upload and Edit on appdb
      if: ${{ inputs.upload_to_appdb }}
      id: upload_step
      env:
        APPDB_LINK_TOKEN: ${{ secrets.APPDB_LINK_TOKEN }}
        PACKAGE_PATH: ${{ github.workspace }}/${{ steps.package_info.outputs.package_name }}
        JOB_ID: ${{ steps.package_info.outputs.job_id }}
        EEVEEVERSIONNAME: ${{ steps.eevee_info.outputs.EEVEEVERSIONNAME }}
        SPOTIFY_VERSION: ${{ env.VANILLASPOTIFYVERSION }}
        WHATSNEW: ${{ steps.eevee_info.outputs.release_body }}
      run: |
        echo "Step 1: Uploading IPA to appdb..."
        curl -sS -X POST https://api.dbservices.to/v1.7/add_ipa/ \
             -F "lt=${APPDB_LINK_TOKEN}" \
             -F "job_id=${JOB_ID}" \
             -F "ipa=@${PACKAGE_PATH}" \
             --fail

        echo "Step 2: Waiting for IPA processing..."
        for i in {1..20}; do
          sleep 15
          STATUS_RESPONSE=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipa_analyze_jobs/ -F "lt=${APPDB_LINK_TOKEN}" -F "ids[]=${JOB_ID}")
          IS_FINISHED=$(echo "$STATUS_RESPONSE" | jq -r '.data[0].is_finished')
          if [ "$IS_FINISHED" = "1" ]; then
            echo "Processing finished!"
            break
          fi
          echo "Still processing... Attempt $i of 20."
          if [ "$i" = "20" ]; then
            echo "Error: Timeout waiting for IPA processing."
            exit 1
          fi
        done
        
        echo "Step 3: Fetching the new IPA ID..."
        IPA_ID=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipas/ -F "lt=${APPDB_LINK_TOKEN}" | jq '(.data | sort_by(.id) | reverse)[0].id')
        if [ -z "$IPA_ID" ] || [ "$IPA_ID" = "null" ]; then
          echo "Error: Could not fetch new IPA ID."
          exit 1
        fi
        echo "Found newest IPA ID: ${IPA_ID}"
        echo "ipa_id=${IPA_ID}" >> "$GITHUB_OUTPUT"

        echo "Step 4: Editing IPA metadata..."
        APP_NAME="Spotify v${SPOTIFY_VERSION} + EeveeSpotify ${EEVEEVERSIONNAME} | Spotify AB"
        curl -sS -X POST https://api.dbservices.to/v1.7/edit_ipa_metadata/ \
          -F "lt=${APPDB_LINK_TOKEN}" \
          -F "id=${IPA_ID}" \
          -F "name=${APP_NAME}" \
          -F "use_default_tos=1" \
          -F "use_default_privacy_policy=1" \
          -F "use_default_license=1" \
          -F "is_18plus=0" \
          -F "description=Enhanced Spotify with SpotC++ features." \
          -F "whatsnew=${WHATSNEW}" \
          -F "is_public=1" \
          -F "source_name=Johnny's library" \
          -F "developer_name=Spotify AB" \
          -F "genre_name=Enhanced Apps" \
          -F "min_ios_version=15.0" \
          -F "min_ipados_version=15.0" \
          --fail
        echo "Metadata updated successfully!"

    - name: Cleanup Old Versions
      if: ${{ inputs.upload_to_appdb && inputs.cleanup_old_versions }}
      env:
        APPDB_LINK_TOKEN: ${{ secrets.APPDB_LINK_TOKEN }}
        NEWEST_IPA_ID: ${{ steps.upload_step.outputs.ipa_id }}
      run: |
        echo "Step 5: Cleaning up old IPA versions, keeping ID ${NEWEST_IPA_ID}..."
        IPAS_RESPONSE=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipas/ -F "lt=${APPDB_LINK_TOKEN}")
        OLD_IPA_IDS=$(echo "$IPAS_RESPONSE" | jq -r --argjson newest_id "$NEWEST_IPA_ID" '(.data | map(select(.name | test("Spotify.*SpotC\+\+"))) | map(select(.id != $newest_id)) | .[].id)')
        if [ -z "$OLD_IPA_IDS" ]; then
          echo "No old SpotC++ versions found to delete."
        else
          echo "Found old IPAs to delete with IDs: $OLD_IPA_IDS"
          for OLD_ID in $OLD_IPA_IDS; do
            echo "Deleting IPA with ID: $OLD_ID..."
            curl -sS -X POST https://api.dbservices.to/v1.7/delete_ipa/ \
              -F "lt=${APPDB_LINK_TOKEN}" \
              -F "id=${OLD_ID}" \
              --fail
            echo "Deleted IPA with ID: $OLD_ID"
            sleep 2
          done
        fi
        echo "Cleanup finished."
    
    - name: Create Draft Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.eevee_info.outputs.EEVEEVERSIONNAME }}"
        name: "${{ steps.eevee_info.outputs.EEVEEVERSIONNAME }}"
        draft: true
        body: ${{ steps.eevee_info.outputs.release_body }}
        files: |
          ${{ steps.package_info.outputs.package_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
